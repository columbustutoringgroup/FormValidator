// Generated by CoffeeScript 1.8.0
(function() {
  var EMAIL_REGEX, ERROR_MESSAGE_MAP, doTypingErrorCheck, emailInput, errorMessages, getAllErrors, getEmailErrors, getPasswordErrors, isErrorFree, loginForm, passwordInput, submitButton, updateErrorVisibility,
    __hasProp = {}.hasOwnProperty;

  EMAIL_REGEX = /[a-z0-9._-]+@[a-z0-9._-]+\.[a-z0-9._-]+/i;

  ERROR_MESSAGE_MAP = {
    invalidEmail: 0,
    passwordTooShort: 1,
    passwordMissingDigit: 2,
    passwordMissingCapitalLetter: 3
  };

  loginForm = $("form");

  emailInput = loginForm.children("input[type='text']");

  passwordInput = loginForm.children("input[type='password']");

  submitButton = loginForm.children("input[type='submit']");

  errorMessages = $(".errors li");

  getEmailErrors = function(typing) {
    var emailAddress;
    emailAddress = emailInput.val();
    if (emailAddress.length === 0 && typing) {
      return {};
    }
    return {
      invalidEmail: !EMAIL_REGEX.test(emailAddress)
    };
  };

  getPasswordErrors = function(typing) {
    var password;
    password = passwordInput.val();
    if (password.length === 0 && typing) {
      return {};
    }
    return {
      passwordTooShort: password.length < 8,
      passwordMissingDigit: !/\d/.test(password),
      passwordMissingCapitalLetter: !/[A-Z]/.test(password)
    };
  };

  getAllErrors = function(typing) {
    return $.extend({}, getEmailErrors(typing), getPasswordErrors(typing));
  };

  isErrorFree = function(errors) {
    var errorKey, hasError;
    for (errorKey in errors) {
      if (!__hasProp.call(errors, errorKey)) continue;
      hasError = errors[errorKey];
      if (hasError) {
        return false;
      }
    }
    return true;
  };

  updateErrorVisibility = function(errors) {
    var errorIndex, errorKey, _results;
    _results = [];
    for (errorKey in ERROR_MESSAGE_MAP) {
      if (!__hasProp.call(ERROR_MESSAGE_MAP, errorKey)) continue;
      errorIndex = ERROR_MESSAGE_MAP[errorKey];
      _results.push(errorMessages.eq(errorIndex).toggle(!!errors[errorKey]));
    }
    return _results;
  };

  doTypingErrorCheck = function() {
    var errorKey, errors;
    errors = getAllErrors(true);
    updateErrorVisibility(errors);
    if (((function() {
      var _results;
      _results = [];
      for (errorKey in errors) {
        if (!__hasProp.call(errors, errorKey)) continue;
        _results.push(errorKey);
      }
      return _results;
    })()).length > 0 && isErrorFree(errors)) {
      return submitButton.removeAttr("disabled");
    } else {
      return submitButton.attr("disabled", "disabled");
    }
  };

  loginForm.submit(function(event) {
    var errors;
    errors = getAllErrors(false);
    if (isErrorFree(errors)) {
      return;
    }
    updateErrorVisibility(errors);
    return event.preventDefault();
  });

  emailInput.change(doTypingErrorCheck);

  emailInput.keyup(doTypingErrorCheck);

  passwordInput.change(doTypingErrorCheck);

  passwordInput.keyup(doTypingErrorCheck);

  doTypingErrorCheck();

}).call(this);
