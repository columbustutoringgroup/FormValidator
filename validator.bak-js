
$(function() {

    /**
     * Ensures that a constructor is only called as a constructor and not as a general function.
     *
     * @param inst Instance to check (usually passed as 'this' in the constructor)
     * @param constructor The constructor function itself
     */
    function checkClassCall(inst, constructor) {
        if (!(inst instanceof constructor))
            throw new TypeError("Cannot call a class as a function");
    }

    function isValidEmail(email) {
        // Not a perfect solution (unfortunately impossible)
        /*
            [\w-.]+     : Matches any mixture of word characters, - and .
            (?:\w+\.)+  : Matches a series of words followed by periods (google.co.)
            [a-z]{2,}   : Matches TLD suffix (uk, us, party, xyz, etc.)
         */
        return /^[\w-.]+@(?:\w+\.)+[a-z]{2,}$/i.test(email);
    }

    function hasMinimumLength(minLength) {
        return function(text) {
            return text.length >= minLength;
        };
    }

    function hasCapital(text) {
        return text.toLowerCase() !== text;
    }

    function hasDigit(text) {
        return /[0-9]/.test(text);
    }

    function isArrayLike(value) {
        return value
            && typeof value === 'object'
            && value.length
            && typeof value.length === 'number'
            && value.length >= 0
            && value.length % 1 === 0
    }

    function combine() {
        const fns = (arguments.length === 1 && isArrayLike(arguments[0]) ? arguments[0] : [].slice.call(arguments));

        return function(cb) {
            const initialArgs = [].slice.call(arguments);
            initialArgs.shift();

            return fns.reduce(function(args, fn) {
                var result;

                if (!isArrayLike(args))
                    result = fn.apply(this, [args]);
                else
                    result = fn.apply(this, args);

                cb(fn, result);
                return args;
            }, initialArgs);
        }
    }

    function selectFromObject(selector) {
        return function(fn) {
            return function (obj) {
                return fn(obj[selector]);
            }
        }
    }

    function Validation(validationFn, errorElement) {
        checkClassCall(this, Validation);

        this.fn = validationFn;
        this.element = $(errorElement);

        this.hideElement = function() {
            this.element.hide();
        };

        this.showElement = function() {
            this.element.show();
        };

        this.apply = function(self, args) {
            return this.fn.apply(self, args);
        }
    }

    const selectEmail = selectFromObject('email');
    const selectPassword = selectFromObject('password');

    const form = $('form[name="sign_in"]');
    const errorItems = $('ul.errors').children();

    const validEmailReq = errorItems[0];
    const passwdLengthReq = errorItems[1];
    const passwdCapitalReq = errorItems[2];
    const passwdNumberReq = errorItems[3];

    const validations = [
        new Validation(selectEmail(isValidEmail), validEmailReq),
        new Validation(selectPassword(hasMinimumLength(8)), passwdLengthReq),
        new Validation(selectPassword(hasCapital), passwdCapitalReq),
        new Validation(selectPassword(hasDigit), passwdNumberReq),
    ];

    const validator = combine(validations);

    form.submit(function(event) {
        const email = form.find('input:text').first().val();
        const password = form.find('input:password').first().val();

        validator(function(validation, passed) {
            if(!passed) {
                validation.showElement();
            } else {
                validation.hideElement();
            }
        }, {
            email: email,
            password: password,
        });

        event.preventDefault();
    });

    errorItems.hide();
});